# -*- coding: utf-8 -*-
"""Exercise_Alpha_Beta_Pruning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NLGMw5XaE2TzxRzui4ZkeMNeTUSunF1f

#*Aplha beta pruning - Pseudocode*

```
function minimax_with_alpha_beta_pruning(node, depth, maximizingPlayer, alpha, beta)
    if depth == 0 or node is a terminal node
        return the heuristic value of node
    if maximizingPlayer
        value = -infinity
        for each child of node
            value = max(value, minimax_with_alpha_beta_pruning(child, depth - 1, FALSE, alpha, beta))
            alpha = max(alpha, value)
            if beta <= alpha
                break
        return value
    else
        value = +infinity
        for each child of node
            value = min(value, minimax_with_alpha_beta_pruning(child, depth - 1, TRUE, alpha, beta))
            beta = min(beta, value)
            if beta <= alpha
                break
        return value


```
"""

# importing the module
import time
player, opponent = 'x', 'o'

def isMovesLeft(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                return True
    return False

def evaluate(b):
    for row in range(3):
        if b[row][0] == b[row][1] and b[row][1] == b[row][2]:
            if b[row][0] == player:
                return 10
            elif b[row][0] == opponent:
                return -10
    for col in range(3):
        if b[0][col] == b[1][col] and b[1][col] == b[2][col]:
            if b[0][col] == player:
                return 10
            elif b[0][col] == opponent:
                return -10
    if b[0][0] == b[1][1] and b[1][1] == b[2][2]:
        if b[0][0] == player:
            return 10
        elif b[0][0] == opponent:
            return -10
    if b[0][2] == b[1][1] and b[1][1] == b[2][0]:
        if b[0][2] == player:
            return 10
        elif b[0][2] == opponent:
            return -10
    return 0

def minimax(board, depth, isMax, alpha, beta):
    score = evaluate(board)
    if score == 10:
        return score
    if score == -10:
        return score
    if not isMovesLeft(board):
        return 0
    if isMax:
      '''
      ENTER CODE FOR THE MAXIMIZING PLAYER
      '''
      pass


    else:
      '''
      ENTER CODE FOR THE MINIMIZING PLAYER
      '''
      pass


def findBestMove(board):
    bestVal = -1000
    bestMove = (-1, -1)
    alpha = -1000
    beta = 1000
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = player
                moveVal = minimax(board, 0, False, alpha, beta)
                board[i][j] = '_'
                if moveVal > bestVal:
                    bestMove = (i, j)
                    bestVal = moveVal
                alpha = max(alpha, bestVal)
    print("The value of the best Move is :", bestVal)
    print()
    return bestMove

# Driver code
board = [
	[ 'x', 'o', 'x' ],
	[ 'o', 'x', 'o' ],
	[ '_', '_', '_' ]
]

# records start time
start = time.perf_counter()
 
# calls the function
bestMove = findBestMove(board)
 
# record end time
end = time.perf_counter()
 
# find elapsed time in seconds
ms = (end-start) * 10**6
print(f"Elapsed {ms:.03f} micro secs.")

print("The Optimal Move is :")
print("ROW:", bestMove[0], " COL:", bestMove[1])